#!/bin/bash
#
# git-transform - manages special Git branches for automatic content transformations
#
# HISTORY
#   20140702 first version by JF Gigand <jf@geonef.fr>


######################################################################
# LIBS
. /usr/lib/sysconf.base/common.sh


######################################################################
# "hard-coded" DEFINITIONS

git=git
_git_tr_branch=git-transform
source_work_dir=$PWD
source_git_dir=$PWD/.git

show_usage()
{
    cat <<EOF
usage: $0 sync
EOF

}

_git_tr_init()
{
    _tr_commit=$( $git show-ref --hash refs/heads/$_git_tr_branch )
    if test "x$_tr_commit" = "x"; then
        nef_log "Branch '$_git_tr_branch' does not exist. Creating..."
        tree=$( echo -n "" | $git mktree )
        nef_log "tree = $tree"
        commit=$( echo "empty tree" | $git commit-tree $tree )
        nef_log "commit = $commit"
        $git update-ref refs/heads/$_git_tr_branch $commit
    fi
    # [ -f $_repos_dir/refs/heads/git-transform
    #     git update-ref
    # git branch --list --no-abbrev -v | cat
}

_git_tr_sync()
{
if test -f docker-sync.list; then
    nef_array_from_lines syncs "$( cat docker-sync.list  )"

    #     old_ifs="$IFS"
    #     IFS="
    # "
    #     syncs=( `cat docker-sync.list` )
    #     IFS="$old_ifs"

    for sync in "${syncs[@]}"; do
        image=$(echo "$sync" | cut -f1)
        # image=$(echo "$sync" | cut -f1)

        echo Running image: $image
        echo sudo docker.io run $image git-transform $image
        _opts="--rm=true"
        sudo docker.io run $_opts $image ls -l /
    done

fi

}

_git_tr_in_container()
{
    dest_work_dir=$source_git_dir/transform/work

    [ -d /repository ] || nef_fatal "/repository does not exist as a directory"
    cd /repository
    git status >/dev/null || nef_fatal "/repository is not a Git working tree"

    if test -d $dest_work_dir; then
        rm -rf $dest_work_dir || nef_fatal "could not remove $dest_work_dir"
    fi

    # Clone or init (if out branch non-existant)
    branch=toto
    hasbranch=yes
    if test -f .git/refs/heads/$branch; then
        git clone . -b $branch .git/transform/work || nef_fatal "could not create work tree of branch $branch"
        cd .git/transform/work
    else
        git init .git/transform/work || nef_fatal "could not init git repos in .git/transform/work"
        cd .git/transform/work
        git co -b $branch
    fi
    # git status
    git remote -v
    # mkdir -p .git/transform/work || nef_fatal "cannot mkdir .git/transform/work"
}


######################################################################
# COMMAND LINE PARSING

while [ "$1" != "" ]; do

    case "$1" in
        init)
            _git_tr_init
            exit
            ;;
        sync)
            _git_tr_sync "$@"
            exit
            ;;
        in-container)
            _git_tr_in_container
            exit
            ;;
        -h)
	    show_usage
            exit 0
	    ;;
        --help)
	    show_usage
            exit 0
	    ;;
        -*)
            nef_usage_error "bad option: $1"
	    ;;
        *)
            nef_usage_error "unknown command: $1"
            ;;
    esac

done
