#!/bin/bash
#
# git-transform - manages special Git branches for automatic content transformations
#
# HISTORY
#   20140702 first version by JF Gigand <jf@geonef.fr>

# [ "x$NEF_DIR_USR" = x ] && NEF_DIR_USR=/usr
nef_command_name=git-transform
. $(dirname $0)/../share/nef-common/shell-command || exit 2

# . $NEF_DIR_USR/share/nef-common/shell-command


######################################################################
# DEFAULTS AND FUNCTIONS

# Name of our work dir inside GIT's own .git directory
#   will set "git_transform_work_path"
GIT_TRANSFORM_WORK_DIR=$nef_command_name

# Where to look for transform definition files, as a subdirectory
# of the transform branch tree
GIT_TRANSFORM_ENGINE_DIR=$nef_command_name

# Where the GIT bare repository lies from within the container FS
GIT_TRANSFORM_CONTAINER_REPOSITORY=/repository.git

nef_command_usage() {
    cat <<-EOF
	$nef_command_callname - manage data transformations through GIT

	TRANSFORM PLUMBING COMMANDS

	  $nef_command_callname mksync <transform-ref>

	      Create a new sync for the given transform which is a tree-ish reference
	      to a transform engine implementation that provide enough information
	      to be runned as a Docker container.

	      <transform-ref> can be a branch name, a commit ID or any other tree-ish thing


	  $nef_command_callname channels [options] <sync-commit-ref> [<channel-name>]

	      <sync-commit-ref> is a sync commit reference of which channels must be listed

	      <channel-name> is the channel name. Valid values would be given by:
	      \$($nef_command_callname channels --all --name <sync-commit-ref>)

	      --all     Include the "transform" channel in the channel list
	      --hash    Just print the hash ID
	      --name    Just print the channel name
	      --shell   Print "name=ID" lines that can be eval'ed by a shell


	  $nef_command_callname apply <sync-commit-ref> <channel-name> <commit-ref>

	      Merge the given commit into the sync, interpreted through the given channel.

	      <sync-commit-ref> is a reference to the sync to base the transform application on.

	      <channel-name> is the name of the channel, like "in", "out", "source",
              "build"... or "transform". Use the "transform" channel to update the transform
	      engine (instead of the data).

	      <sync-commit-ref> is a reference to the commit to merge. IT MUST BE SINGLE
	      COMMIT! Branch refs like "master" can be given, but merging multiple commits
	      won't work. For that, use "$nef_command_callname" instead.

	  $nef_command_callname test <transform-commit>

	      Run unit tests

	EOF
}

nef_tr_command_shell() {
    [ "x$1" = x ] && nef_fatal_usage "missing arg: <transform-commit>"
    _transform_commit=$(_to_git_commit "$1") \
        || nef_fatal_usage "invalid arg: <transform-commit>"
    shift

    nef_tr_run_transform_command "$_transform_commit" _shell "$@"
}

nef_tr_command_mksync() {
    [ "x$1" = x ] && nef_fatal_usage "missing arg: <transform-commit>"
    _transform_commit=$(_to_git_commit "$1") \
        || nef_fatal_usage "invalid arg: <transform-commit>"
    shift

    nef_tr_run_transform_command "$_transform_commit" mksync "$@"
}

nef_tr_command_channels() {
    [ "x$1" = x ] && nef_fatal_usage "missing arg: <sync-commit>"
    GIT_TRANSFORM_CONTAINER_SYNC=$(_to_git_commit "$1") \
        || nef_fatal_usage "invalid arg: <sync-commit>"
    shift
    _transform_commit=$(_sync_to_transform_commit $GIT_TRANSFORM_CONTAINER_SYNC)

    nef_tr_run_transform_command "$_transform_commit" \
        channels "$@" \
        | sort $next

    # env
}

nef_tr_command_apply() {
    [ "x$1" = x ] && nef_fatal_usage "missing arg: <sync-commit>"
    GIT_TRANSFORM_CONTAINER_SYNC=$(_to_git_commit "$1") \
        || nef_fatal_usage "invalid arg: <sync-commit>"
    shift

    [ "x$1" = x ] && nef_fatal_usage "missing arg: <channel>"
    GIT_TRANSFORM_CONTAINER_APPLY_CHANNEL="$1"
    shift

    [ "x$1" = x ] && nef_fatal_usage "missing arg: <content-commit>"
    GIT_TRANSFORM_CONTAINER_APPLY_COMMIT=$(_to_git_commit "$1") \
        || nef_fatal_usage "invalid arg: <content-commit>"
    shift

    _transform_commit=$(_sync_to_transform_commit $GIT_TRANSFORM_CONTAINER_SYNC)

    nef_tr_run_transform_command "$_transform_commit" \
        apply "$@"
}

######################################################################
# LIB FUNCTIONS

_to_git_commit()
{
    git cat-file -e "$1" || nef_fatal "'$1' does not represent a commit object"
    git rev-parse "$1" || nef_fatal "'$1' could not be resolved to a commit"
}
_git_parent_of()
{
    git log -1 --pretty=%P $1 | sed 's/ .*//'
}
_sync_to_transform_commit() {
    git cat-file -p $1 \
        | grep "^git-transform-channel-transform:" \
        | sed -E 's/^[^:]+: (.*)/\1/' \
        || nef_fatal "'$1' is not a valid sync commit"
}

# args: <subdir> <commit-ref>
_nef_tr_git_checkout_work()
{
    _wcpath="$1"
    _commit=$2

    if [ -d "$_wcpath" ]; then
        cd "$_wcpath"
        nef_cmd git fetch --quiet origin
    else
        nef_cmd git clone --quiet --no-checkout --reference  "$nef_git_dir" "$nef_git_dir" "$_wcpath" \
            || nef_fatal "git clone failed, try --debug-verbose"
        cd "$_wcpath"
    fi

    nef_cmd git reset --quiet --hard $_commit || nef_fatal "git reset failed, try --debug-verbose"
    # nef_cmd git checkout $_commit || nef_fatal "git reset failed, try --debug"
}


# args: <transform-tree-ish> <command> [args] ...
nef_tr_run_transform_command()
{
    nef_log --debug "nef_tr_run_transform_command() args:" "$@"

    local _transform_commit=$1; shift
    local _command=$1; shift
    local _last_transform_dir=$(git name-rev --name-only $_transform_commit | sed 's/~.*//')
    local _wcpath="${git_transform_work_path}/${_last_transform_dir}"

    _nef_tr_git_checkout_work "$_wcpath" $_transform_commit
    cd $_wcpath || nef_fatal "could not chdir to $_wcpath"
    nef_log -v "Updated $_wcpath"

    if [ "x$_command" != x_shell ]; then
        [ -f $GIT_TRANSFORM_ENGINE_DIR/$_command ] \
            || nef_fatal "$GIT_TRANSFORM_ENGINE_DIR/$_command does not exist in transform tree"
    fi

    local _engine_path=$GIT_TRANSFORM_ENGINE_DIR/engine
    local _engine=$(cat $_engine_path) || nef_fatal "missing file '${_engine_path}'"

    nef_log --debug "engine spec = $_engine"
    type=$(echo $_engine | cut -d: -f1)
    [ "x$type" = xdocker ] || nef_fatal "$_enginepath: only the 'docker:' type is supported ('$type')"
    dockertype=$(echo $_engine | cut -d: -f2)
    dockername=$(echo $_engine | cut -d: -f3)

    GIT_TRANSFORM_CONTAINER_CHANNEL_TRANSFORM=$_transform_commit
    GIT_TRANSFORM_CONTAINER_GIT_AUTHOR_NAME=$(git config user.name)
    GIT_TRANSFORM_CONTAINER_GIT_AUTHOR_EMAIL=$(git config user.email)
    GIT_TRANSFORM_CONTAINER_LOG=$GIT_TRANSFORM_CONTAINER_REPOSITORY/${GIT_TRANSFORM_WORK_DIR}/${_last_transform_dir}/log

    rm -f log
    touch log

    docker_v_opts="-v $nef_git_dir:$GIT_TRANSFORM_CONTAINER_REPOSITORY"
    docker_env_opts=
    for var in $(compgen -v | grep ^GIT_TRANSFORM_CONTAINER_ ); do
        nef_log --debug "Exporting: $var=${!var}"
        docker_env_opts="$docker_env_opts -e $var=${!var}"
    done

    _full_command_path="${GIT_TRANSFORM_CONTAINER_REPOSITORY}/${GIT_TRANSFORM_WORK_DIR}/${_last_transform_dir}/${GIT_TRANSFORM_ENGINE_DIR}/${_command}"
    [ "$_command" = _shell ] && _full_command_path=/bin/bash

    case "$dockertype" in
        image)
            nef_log -v "Running Docker image '${dockername}' for command '${_command}'"
            nef_cmd --debug-name DOCKER sudo \
                docker.io run -t -i --rm=true $_docker_opts $docker_v_opts $docker_env_opts $dockername \
                $_full_command_path "$@" \
                | sed 's/\r$//' | cat \
                || nef_fatal "failed running docker image, try --debug"
            # the sed expr "\r\n" -> "\n" is because of https://github.com/dotcloud/docker/issues/1755

            cat log | sed 's/\r$//' | nef_log_pipe --verbose "container log:"
            ;;
        container)
            nef_fatal "docker type 'container' not implemented yet"
            ;;
        *)
            nef_fatal "$_engine_path: invalid docker type '$dockertype' (must be 'image' or 'container')"
            ;;
    esac

    cd ..

    if [ "$_last_transform_dir" = "undefined" ]; then
        nef_log -v "Removing work directory: $_last_transform_dir"
        rm -rf $_last_transform_dir \
            || nef_log "Warning: could not remove work directory: $_last_transform_dir"
    else
        nef_log --debug "Not removing work directory for possible later use: $PWD/$_last_transform_dir"
    fi

}


######################################################################
# TESTS

_test_cmd() {
    nef_log "TEST RUN CMD:" "$@"
    _last_test_output=$(
        {
            # thanks to http://stackoverflow.com/questions/9112979/pipe-stdout-and-stderr-to-two-different-processes-in-shell-script
            {
                "$@" 2>&3 | nef_log_pipe --stdout -v "TEST RUN CMD  <stdout>:" >&4
                # This is tricky: we print FAILURE=<code> to send it back to main (sub)shell
                local _status=${PIPESTATUS[0]}
                if [ $_status -ne 0 ]; then
                    echo "FAILURE=$_status;" >&4
                    # nef_fatal "test command failed with status $_status" >&4 2>&1
                    # exit
                fi
            } 3>&1 1>&2 | nef_log_pipe -v "TEST RUN CMD  <stderr>:"
        }  4>&1
    )

    # The trick
    local _status=$(echo "$_last_test_output" | sed -r 's/^FAILURE=([-0-9]);/\1/')
    if [ "x$_status" != x ]; then
        nef_fatal "test command failed with status $_status:" "$@"
    fi

    # echo "------------------------" $_last_test_output "-----------------------------"
}
_test_cmd_tr()
{
    local _opts=""

    [ $nef_opt_show_debug = yes ] && _opts="$_opts -vv"

    _test_cmd "$nef_command_callname" $_opts "$@"
}
_test_echo() {
    nef_log "TEST RUN ECHO:" "# $@"
}
nef_tr_command_test() {
    [ "x$1" = x ] && nef_fatal_usage "missing arg: <transform-commit>"
    _transform_commit=$(_to_git_commit "$1") \
        || nef_fatal_usage "invalid arg: <transform-commit>"
    shift

    nef_log "RUNNING TESTS on transform $_transform_commit"

    dir=$(mktemp --directory)
    nef_log "Created temp dir: $dir"
    cd $dir || nef_log "Could not chdir in temp dir: $dir"
    ## START

    _test_echo "Initializing working tree + initial commit in $PWD"
    _test_cmd git init .
    _test_cmd git fetch "$nef_git_dir"
    _test_cmd git checkout --orphan root
    _test_cmd git reset --hard
    _test_cmd sh -c 'echo bonjour >bonjour'
    _test_cmd git add bonjour
    _test_cmd git commit -m "init commit with file ./bonjour"

    _test_echo "Create sync out of transform commit '$_transform_commit'"
    _test_cmd_tr mksync "$_transform_commit"
    _last_sync="$_last_test_output"
    _test_cmd [ x$_last_sync != x ]
    _test_cmd_tr apply "$_last_sync" root root
    _last_sync="$_last_test_output"
    _test_cmd [ x$_last_sync != x ]

    _test_echo "Making a change in 'sub1/' and sync it"
    _test_cmd mkdir -p sub1/subsub/
    _test_cmd sh -c 'echo in-sub >sub1/file'
    _test_cmd sh -c 'echo in-sub-sub >sub1/subsub-file'
    _test_cmd git add sub1/
    _test_cmd git commit -m "created sub1/ from root branch"
    _test_cmd_tr apply "$_last_sync" root root
    _last_sync="$_last_test_output"
    _test_cmd [ x$_last_sync != x ]

    # END
    rm -rf $dir || nef_fatal "could not remove temp dir: $dir"
    nef_log "Removed temp dir: $dir"
}

######################################################################
# COMMAND LINE & RUN

nef_command_merge_env
nef_command_init_options

nef_tr_command_argv=()

while [ "$1" != "" ]; do

    case "$1" in
        -v | --verbose) nef_opt_show_verbose=yes; shift ;;
        -vv | --debug-verbose) nef_opt_show_verbose=yes; nef_opt_show_debug=yes; shift ;;
        -h | --help) nef_show_usage; exit 0 ;;
        -*) nef_fatal_usage "bad option: $1" ;;
        *) nef_tr_command_argv=(${nef_tr_command_argv[@]} "$1"); shift ;;
    esac

done

[ "x${nef_tr_command_argv[0]}" = "x" ] && nef_fatal_usage "missing command"

# Load $nef_git_dir as absolute path
_nef_git_dir=$(git rev-parse --git-dir) || nef_fatal "not in a git repository"
cd $_nef_git_dir
nef_git_dir=$PWD
unset _nef_git_dir
cd - >/dev/null

# Repository-specific variables
git_transform_work_path="${nef_git_dir}/${GIT_TRANSFORM_WORK_DIR}"


# Run command
nef_tr_command_function_name="nef_tr_command_${nef_tr_command_argv[0]}"
unset nef_tr_command_argv[0]
$nef_tr_command_function_name "${nef_tr_command_argv[@]}" \
    || nef_fatal "command ${nef_tr_command_argv[0]} returned status $?"
nef_log -v "Command returned successfully."
